generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  BUYER
  SELLER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  COD
  ONLINE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum ShipmentStatus {
  NOT_SHIPPED
  PICKED_UP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
}

model User {
  id       String   @id @default(uuid())
  email    String   @unique
  password String
  name     String
  phone    String?
  userType UserType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  buyer  Buyer?
  seller Seller?
  admin  Admin?

  @@index([email])
  @@index([userType])
}

model Buyer {
  id     String @id @default(uuid())
  userId String @unique

  dateOfBirth   DateTime?
  loyaltyPoints Int       @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders    Order[]
  addresses Address[]

  @@index([userId])
}

model Seller {
  id     String @id @default(uuid())
  userId String @unique

  businessName    String
  businessAddress String?
  gstNumber       String? @unique
  accountNumber   String?
  ifscCode        String?
  isVerified      Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  products Product[]

  @@index([userId])
  @@index([gstNumber])
}

model Admin {
  id     String @id @default(uuid())
  userId String @unique

  permissions  String[]
  isSuperAdmin Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Address {
  id           String  @id @default(uuid())
  buyerId      String
  fullName     String
  phone        String
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  pincode      String
  isDefault    Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  buyer  Buyer   @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  orders Order[]

  @@index([buyerId])
}

model Category {
  id          String  @id @default(uuid())
  name        String  @unique
  slug        String  @unique
  description String?
  imageUrl    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subCategories SubCategory[]
  products      Product[]

  @@index([slug])
}

model SubCategory {
  id          String  @id @default(uuid())
  name        String
  slug        String
  description String?
  categoryId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  products Product[]

  @@unique([categoryId, slug])
  @@index([categoryId])
}

model Product {
  id           String   @id @default(uuid())
  name         String
  slug         String   @unique
  description  String   @db.Text
  price        Decimal  @db.Decimal(10, 2)
  comparePrice Decimal? @db.Decimal(10, 2)
  stock        Int      @default(0)
  imageUrls    String[]

  isActive   Boolean @default(true)
  isFeatured Boolean @default(false)

  sellerId      String
  categoryId    String
  subCategoryId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  seller      Seller      @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  category    Category    @relation(fields: [categoryId], references: [id])
  subCategory SubCategory @relation(fields: [subCategoryId], references: [id])
  orderItems  OrderItem[]

  @@index([sellerId])
  @@index([categoryId])
  @@index([subCategoryId])
  @@index([slug])
  @@index([isActive])
}

model Order {
  id          String @id @default(uuid())
  orderNumber String @unique
  buyerId     String

  totalAmount   Decimal       @db.Decimal(10, 2)
  status        OrderStatus   @default(PENDING)
  paymentMethod PaymentMethod @default(COD)
  paymentStatus PaymentStatus @default(PENDING)

  shippingAddressId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  buyer           Buyer       @relation(fields: [buyerId], references: [id])
  shippingAddress Address     @relation(fields: [shippingAddressId], references: [id])
  orderItems      OrderItem[]
  shipment        Shipment?
  payment         Payment?

  @@index([buyerId])
  @@index([orderNumber])
  @@index([status])
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String
  productId String

  quantity Int
  price    Decimal @db.Decimal(10, 2)

  createdAt DateTime @default(now())

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Shipment {
  id             String         @id @default(uuid())
  orderId        String         @unique
  trackingNumber String?        @unique
  carrier        String?
  status         ShipmentStatus @default(NOT_SHIPPED)

  estimatedDelivery DateTime?
  actualDelivery    DateTime?

  notes String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order         Order                   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  statusHistory ShipmentStatusHistory[]

  @@index([orderId])
  @@index([trackingNumber])
}

model ShipmentStatusHistory {
  id         String         @id @default(uuid())
  shipmentId String
  status     ShipmentStatus
  notes      String?
  location   String?

  createdAt DateTime @default(now())

  shipment Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)

  @@index([shipmentId])
}

model Payment {
  id      String        @id @default(uuid())
  orderId String        @unique
  amount  Decimal       @db.Decimal(10, 2)
  method  PaymentMethod
  status  PaymentStatus @default(PENDING)

  transactionId   String? @unique
  gatewayResponse Json?

  paidAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([transactionId])
}
